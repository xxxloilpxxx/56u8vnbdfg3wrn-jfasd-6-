local s,e = pcall(function()
    if not (game.PlaceId == 746820961) then return end
    repeat
		task.wait()
	until game:IsLoaded()
    --if getgenv().__mpho_1__loaded__ == true then return warn("[mopsHub Loader]: mopsHub is already loaded.") end
	getgenv().__mpho_1__loaded__ = true

    getgenv = getgenv

    --MODULES
	local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()
	local AkaliNotif = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/Dynissimo/main/Scripts/AkaliNotif.lua"))();
    local ESPFramework = loadstring(game:HttpGet("https://raw.githubusercontent.com/NougatBitz/Femware-Leak/main/ESP.lua", true))()
	local Notify = AkaliNotif.Notify;
	local writeclipboard,encodeb64,decodeb64,Request = ((syn and syn.write_clipboard) or setclipboard),((syn and syn.crypt.base64.encode) or (Krnl and Krnl.Base64.Encode)),((syn and syn.crypt.base64.decode) or (Krnl and Krnl.Base64.Decode)),(http_request or syn and syn.request or request or nil)
	local Player = game:GetService("Players").LocalPlayer
    local Weapons = game:GetService("ReplicatedStorage").Weapons
	local GunStatsBackup = {}
	local game_client = {}
	local settings = {
		autoLoadConfigs = nil,
	}
    local ESPSettings = {
        PlayerESP = {
            Enabled = getgenv()._esp,
            TracersOn = getgenv()._esptracers,
            BoxesOn = getgenv()._espboxes,
            NamesOn = getgenv()._espnames,
            DistanceOn = getgenv()._espdistance,
            AttachShift = getgenv()._esptracerattachshift,
            HealthOn = false,
            ToolOn = false,
            TeamMates = true,
            FaceCamOn = false,
            Distance = 2000,
        },
        ScrapESP = {
            Enabled = false,
            Distance = 2000,
            LegendaryOnly = true,
            RareOnly = true,
            GoodOnly = true,
            BadOnly = true
        },
        SafeESP = {
            Enabled = false,
            Distance = 2000,
            BigOnly = true,
            SmallOnly = true
        },
        RegisterESP = {
            Enabled = false,
            Distance = 2000
        },
        ESPColor = Color3.fromRGB(255, 255, 255),
        ToolColor = Color3.fromRGB(255, 255, 255)
    }
    local flying,bv,bav,h,c,cam,nc,Clip,rstr
	local p = game.Players.LocalPlayer
	local buttons = {W = false, S = false, A = false, D = false, Moving = false}

    local Players = game:GetService("Players")
    local Mouse = Player:GetMouse()
    local RunService = game:GetService("RunService")

    --STUFF THAT NEEDS TO RUN AT EXECUTE
	if isfile("/mopsHub/settings_unit1968.mhs") then
		local s,e = pcall(function()
			local file_settings = readfile("/mopsHub/settings_unit1968.mhs")
			local parsedSettings = {}
			local s,e = pcall(function()
				parsedSettings = game:GetService("HttpService"):JSONDecode(file_settings)
			end)
			if s then
				for _,v in pairs(parsedSettings) do
					settings[_] = v
				end
			else
				warn("[mopsHub Error]: Unable to parse local saved settings json.\nError:\n\n> ".. e)
			end
		end)
		if not s and e then
			print(e)
		end
	else
		autoLoadConfigs = true
		writefile("/mopsHub/settings_unit1968.mhs", tostring(game:GetService("HttpService"):JSONEncode(settings)))
		print("[mopsHub Debug]: Created local config file.")
	end

    --WEAPON STATS BACKUP
    for _,v in pairs(Weapons:GetChildren()) do
        GunStatsBackup[v.Name] = {
            Ammo = v:FindFirstChild("Ammo") and v.Ammo.Value,
            Recoil = v:FindFirstChild("Recoil") and v.Recoil.Value,
            RRecoil = v:FindFirstChild("RRecoil") and v.RRecoil.Value,
            LRecoil = v:FindFirstChild("LRecoil") and v.LRecoil.Value,
            Firerate = v:FindFirstChild("Firerate") and v.Firerate.Value,
        }
    end

    --GET CLIENT STUFF
    for _, v in pairs(getgc(true)) do
        if typeof(v) == "table" and rawget(v, "ammocount") then
            game_client.main_client = v
        end
    end


	--ENV
	getgenv().ESPFramework = ESPFramework
    getgenv()._esptracerattachshift = 1
    getgenv()._WINDOW = {
		Tabs = {},
	}

	--WINDOW CONFIG
	local _TABS = {
		"Weapon",
		"Visual",
		"Character",
		"Credits"
	}

    local _FUNCTIONS = {
		["Weapon"] = {
            {
                Function = "CreateSection",
                Args = "━ Aimbot ━",
            },
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Silent Aimbot",
					Flag = "_silentaim",
					Callback = function(Value)
						getgenv()._silentaim = Value
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Visible Check",
					Flag = "_visiblecheck",
					Callback = function(Value)
						getgenv()._visiblecheck = Value
					end,
				}
			},
            {
				Function = "CreateDropdown",
				_envState = "Head",
				Args = {
					Name = "Hit Part",
					Flag = "targetedPart",
					Options = {"Head","Chest","Random"},
					CurrentOption = getgenv()._hitPart or "Head",
					Callback = function(Value)
						getgenv()._hitPart = Value
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState = false,
				Args = {
					Name = "Draw FOV",
					Flag = "_drawfov",
					Callback = function(Value)
						getgenv()._drawfov = Value
					end,
				}
			},
			{
				Function = "CreateSlider",
				_envState = 50,
				Args = {
					Name = "FOV",
					Flag = "fov",
					Range = {0, 360},
					Increment = 1,
					Suffix = "",
					CurrentValue = 80,
					Callback = function(Value)
						getgenv().fov = Value
					end,
				}
			},
			{
                Function = "CreateSection",
                Args = "━ Gun Mods ━",
            },
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Infinite Ammo",
					Flag = "_infammo",
					Callback = function(Value)
						getgenv()._infammo = Value
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "No Recoil",
					Flag = "_norecoil",
					Callback = function(Value)
						getgenv()._norecoil = Value
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "No Spread",
					Flag = "_nospread",
					Callback = function(Value)
						getgenv()._nospread = Value
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Rapid Fire",
					Flag = "_rapidfire",
					Callback = function(Value)
						getgenv()._rapidfire = Value
					end,
				}
			},
        },
        ["Visual"] = {
			{
				Function = "CreateSection",
				Args = "━ ESP ━",
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "ESP",
					Flag = "_esp",
					Callback = function(Value)
						getgenv()._esp = Value
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Boxes",
					Flag = "_espboxes",
					Callback = function(Value)
						getgenv()._espboxes = Value
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Tracers",
					Flag = "_esptracers",
					Callback = function(Value)
						getgenv()._esptracers = Value
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateDropdown",
				_envState = "Bottom",
				Args = {
					Name = "Tracers Orientation",
					Flag = "_tracersorientation",
					Options = {"Bottom","Middle","Top"},
					CurrentOption = "Bottom",
					Callback = function(Value)
                        local v = 0

                        if Value == "Bottom" then
                            v = 1
                        elseif Value == "Middle" then
                            v = 2
                        elseif Value == "Top" then
                            v = 1000
                        end
						getgenv()._esptracerattachshift = v or 0
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Names",
					Flag = "_espnames",
					Callback = function(Value)
						getgenv()._espnames = Value
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Health",
					Flag = "_esphealth",
					Callback = function(Value)
						getgenv()._esphealth = Value
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Distance",
					Flag = "_espdistance",
					Callback = function(Value)
						getgenv()._espdistance = Value
                        getgenv().updateespvalues()
					end,
				}
			},
        },
        ["Character"] = {
			{
				Function = "CreateSection",
				Args = "━ Humanoid Modifications ━",
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Custom Walkspeed",
					Flag = "_ws",
					Callback = function(Value)
						getgenv()._ws = Value
					end,
				}
			},
            {
                Function = "CreateSlider",
                _envState = 35,
                Args = {
                    Name = "Walkspeed",
                    Flag = "_walkspeed",
                    CurrentValue = 35,
                    Range = {0, 200},
					Increment = 1,
					Suffix = "",
                    Callback = function(Value)
                        getgenv()._walkspeed = Value
                    end
                }
            },
			{
				Function = "CreateSection",
				Args = "━ NoClip ━",
			},
			{
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "NoClip",
					Flag = "_noclip",
					Callback = function(Value)
						getgenv()._noclip = Value
						if Value == true then
							game_client:noclip()
						else
							game_client:clip()
						end
					end,
				}
			},
            {
				Function = "CreateSection",
				Args = "━ Infinite Jump ━"
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Infinite Jump",
					Flag = "_infjump",
					Callback = function(Value)
						getgenv()._infjump = Value
					end,
				}
			},
            {
                Function = "CreateSlider",
                Args = {
                    Name = "Infinite Jump Height",
                    Flag = "_infjumpheight",
                    CurrentValue = 30,
                    Range = {0, 60},
					Increment = 1,
					Suffix = "",
                    Callback = function(Value)
                        getgenv()._infjumpheight = Value
                    end
                }
            },
            {
                Function = "CreateSection",
                Args = "━ Spinbot ━",
            },
            {
				Function = "CreateToggle",
                _envState =  false,
				Args = {
					Name = "Spin Bot",
					Flag = "_spinbot",
					Callback = function(Value)
						getgenv()._spinbot = Value
					end,
				}
			},
            {
                Function = "CreateSlider",
                _envState = 100,
                Args = {
                    Name = "Spin Speed",
                    Flag = "_spinspeed",
                    CurrentValue = 100,
                    Range = {0, 250},
					Increment = 1,
					Suffix = "",
                    Callback = function(Value)
                        getgenv()._spinspeed = Value
                    end
                }
            },
            {
				Function = "CreateSection",
				Args = "━ Other ━",
			},
            {
				Function = "CreateToggle",
                _envState =  false,
				Args = {
					Name = "No Fall Damage",
					Flag = "_nofalldamage",
					Callback = function(Value)
						getgenv()._nofalldamage = Value
					end,
				}
			},
        },
        ["Teleport"] = {
			{
                Function = "CreateSection",
                Args = "━ Gun Mods ━",
            },
        },
    }

    local _CREDITS = {
		["Developers"] = {
			{"ShyFlooo","Programmer"},
		},
	}

    --Functions | Source: some self made

    --CREATE WINDOW
	local Window = Rayfield:CreateWindow({
		Name = "mopsHub - Unit 1968",
		LoadingTitle = "mopsHub - Unit 1968",
		LoadingSubtitle = "by ShyFlooo",
		ConfigurationSaving = {
			Enabled = true,
			FolderName = "/mopsHub/.config", -- Create a custom folder for your hub/game
			FileName = "mopshub_clfacilityroleplay"
		}, 
		KeySystem = false, -- Set this to true to use our key system
		KeySettings = {
			Title = "mopsHub - Unit 1968",
			Subtitle = "Key System",
			Note = "Key here (copied): discord.gg/g4EGAwjUAK",
			FileName = "MOPSHUBKEY",
			SaveKey = true,
			GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
			Key = ""
		}
	})

	--SETUP WINDOW
	for index, name in pairs(_TABS) do
		local w = Window:CreateTab(name)
		getgenv()._WINDOW.Tabs[name] = w
	end
    getgenv()._WINDOW.Tabs["Credits"]:CreateSection("━ Credits ━")
	for index, value in pairs(_CREDITS) do
		local content = ""
		for i,data in pairs(value) do
			if #data[2] > 0 then
				content = content.."\n"..data[1].." - ".. data[2]
			else
				content = content.."\n"..data[1]
			end
		end
		getgenv()._WINDOW.Tabs["Credits"]:CreateParagraph({Title = index, Content = content})
	end

	for index, funcs in pairs(_FUNCTIONS) do
		print("Loaded "..#funcs.." function(s) for ".. index)
		for i, func in pairs(funcs) do
			if func.Function ~= nil and func.Args then
				local Tab = getgenv()._WINDOW.Tabs[index]
				if Tab then
					local s,e = pcall(function()
						local f,l = func.Function, true
						if f == "CreateSection" then
							Tab:CreateSection(func.Args)
						elseif f == "CreateButton" then
							Tab:CreateButton(func.Args)
						elseif f == "CreateToggle" then
							Tab:CreateToggle(func.Args)
						elseif f == "CreateDropdown" then
							Tab:CreateDropdown(func.Args)
						elseif f == "CreateInput" then
							Tab:CreateInput(func.Args)
						elseif f == "CreateSlider" then
							Tab:CreateSlider(func.Args)
						elseif f == "CreateParagraph" then
							Tab:CreateParagraph(func.Args)
						elseif f == "CreateLabel" then
							Tab:CreateLabel(func.Args)
						elseif f == "CreateKeybind" then
							Tab:CreateKeybind(func.Args)
						else
							l = false
						end; if l == true then
							--print("Created function "..tostring(func.Args.Flag or func.Args or "unknown").. " for ".. index.. " ["..string.gsub(func.Function, "Create", "").. "]")
						else
							print("Unable to create "..tostring(func.Function).. " function for ".. index .. " ["..i.."]")
						end
		
						if func.Args.Flag then
							--print("Creating env ".. tostring(func.Args.Flag) .. " with the value ".. tostring(func._envState))
							getgenv()[func.Args.Flag] = func._envState
						end
					end)
					if not s and e then
						print("[mopsHub UI Loader Error]: > "..e)
					end
				end
			end
		end
	end

	--> FUNCTIONS
	function game_client:teleportPlayer(cframe, yield)
		if not Player.Character and not Player.Character.HumanoidRootPart and not typeof(cframe) == "CFrame" then return end
		local h = Player.Character.HumanoidRootPart
		local t = game:GetService("TweenService"):Create(h, TweenInfo.new(1), {CFrame = cframe})
		t:Play()
		if yield then
			t.Completed:Wait()
		end
	end; function game_client:fly()
		if not p.Character or not p.Character.Head or flying then return end
		c = p.Character
		h = c.Humanoid
		h.PlatformStand = true
		cam = workspace:WaitForChild('Camera')
		bv = Instance.new("BodyVelocity")
		bav = Instance.new("BodyAngularVelocity")
		bv.Velocity, bv.MaxForce, bv.P = Vector3.new(0, 0, 0), Vector3.new(10000, 10000, 10000), 1000
		bav.AngularVelocity, bav.MaxTorque, bav.P = Vector3.new(0, 0, 0), Vector3.new(10000, 10000, 10000), 1000
		bv.Parent = c.Head
		bav.Parent = c.Head
		flying = true
		h.Died:Connect(function() flying = false end)
	end; function game_client:unfly()
		if not p.Character or not flying then return end
		h.PlatformStand = false
		bv:Destroy()
		bav:Destroy()
		flying = false
	end; function game_client:noclip()
		Clip = false
		local function ncl()
			if Clip == false and Player.Character ~= nil then
				for _, child in pairs(Player.Character:GetDescendants()) do
					if child:IsA("BasePart") and child.CanCollide == true and child.Name ~= rstr then
						child.CanCollide = false
					end
				end
			end
		end
		nc = RunService.Stepped:Connect(ncl)
	end; function game_client:clip()
		if nc then
			nc:Disconnect()
		end
	end; function game_client:enableNoFallDamage()
        local BlockedRemotes = {"Fall"}
        local Events = {FireServer = true}
        local gameMeta = getrawmetatable(game)
        local psuedoEnv = {
            ["__index"] = gameMeta.__index,
            ["__namecall"] = gameMeta.__namecall;
        }
        setreadonly(gameMeta, false)
        gameMeta.__index, gameMeta.__namecall = newcclosure(function(self, index, ...)
            if Events[index] then
                for i,v in pairs(BlockedRemotes) do
                    if v == self.Name and not checkcaller() then return nil end
                end
            end
            return psuedoEnv.__index(self, index, ...)
        end)
        setreadonly(gameMeta, true)
    end

	getgenv().updateespvalues = function()
        ESPFramework.Color = ESPSettings.ESPColor
        ESPFramework.ToolColor = ESPSettings.ToolColor
        ESPFramework.Tracers = getgenv()._esptracers
        ESPFramework.Names = getgenv()._espnames
        ESPFramework.Health = getgenv()._esphealth
        ESPFramework.Distance = getgenv()._espdistance
        ESPFramework.Boxes = getgenv()._espboxes
        ESPFramework.FaceCamera = ESPSettings.PlayerESP.FaceCamOn
        ESPFramework.AttachShift = getgenv()._esptracerattachshift
        ESPFramework:Toggle(getgenv()._esp)
    end; getgenv().updateespvalues()

	--> MAIN

    --FOV Circle Object
	local FOVCircle
    if Drawing then
        FOVCircle = Drawing.new("Circle")
        FOVCircle.Thickness = 2
        FOVCircle.NumSides = 50
        FOVCircle.Filled = false
        FOVCircle.Transparency = 0.6
        FOVCircle.Radius = getgenv().fov;
        FOVCircle.Color = Color3.new(0, 1, 0.298039)
    else
        warn("[mopsHub Loader Error]: Missing function Drawing. Your executor might be too bad and doesn't support it! (Draw FOV disabled)")
    end

    --No Fall Damage | Source: self made

    local mt = getrawmetatable(game)
    local namecall = mt.__namecall

    setreadonly(mt, false)

    mt.__namecall = newcclosure(function(Self,...)
        local Args = {...}
        local name = getnamecallmethod()

        if not checkcaller() and Self == game.ReplicatedStorage.Events.Fall and name == "FireServer" and getgenv()._nofalldamage then
            table.insert(Args, 1, 0)
            return namecall(Self, Args)
        end

        return namecall(Self,...)
    end)

    setreadonly(mt, true)

    --Walkspeed Changer | Source: self made

    local gmt = getrawmetatable(game)
    setreadonly(gmt, false)
    local old = gmt.__index

    gmt.__index = newcclosure(function(self,b)
        if b == "WalkSpeed" then
            return 16
        end
        return old(self,b)
    end)

    game:GetService("RunService").RenderStepped:Connect(function()
        if not getgenv()._ws then return end
        Player.Character.Humanoid.WalkSpeed = getgenv()._walkspeed
    end)

    --Infinite Jump | Source: idk

	local function Action(Object, Function) if Object ~= nil then Function(Object); end end

	game:GetService('UserInputService').InputBegan:Connect(function(UserInput)
		if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
			if not getgenv()._infjump then return end
			Action(game:GetService('Players').LocalPlayer.Character.Humanoid, function(self)
				if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
					Action(self.Parent.HumanoidRootPart, function(self)
						self.Velocity = Vector3.new(0, getgenv()._infjumpheight or 50, 0);
					end)
				end
			end)
		end
	end)

    --Gun Mods, etc | Source: self made

    RunService.RenderStepped:Connect(function()
        task.spawn(function()
            if not Player.Backpack:FindFirstChild("CLIENT") then return end
            local env = getsenv(Player.Backpack.CLIENT)
            pcall(function()
                if env.equipped == "melee" or env.equipped == "grenade" then
                else
                    if getgenv()._infammo then
                        env.ammocount = 70
                        env.ammocount2 = 70
                        env.ammocount3 = 70
                    end
                    if env.gun.Name ~= "melee" then
                        if getgenv()._norecoil and env.gun.Recoil ~= nil then
                            env.gun.Recoil.Value = 0
                            env.gun.LRecoil.Value = 0
                            env.gun.RRecoil.Value = 0
                        end
                        if getgenv()._rapidfire and env.gun.FireRate ~= nil then
                            env.gun.Automatic.Value = true
                            env.gun.FireRate.Value = 0.01
                            env.bolted = true
                            env.primarymode = "automatic"
                        end
                    end
                    if getgenv()._nospread then
                        env.spread = 0
                    end
                end
            end)
        end)
    end)

    --the other stuff | Source: self made

    RunService.RenderStepped:Connect(function()
        --FOV
        if Drawing and FOVCircle ~= nil then
            FOVCircle.Position = game:GetService("UserInputService"):GetMouseLocation()
            FOVCircle.Radius = getgenv().fov;
            FOVCircle.Visible = getgenv()._drawfov;
        end

        --Spin Bot
        if getgenv()._spinbot then
           Player.Character.Humanoid.AutoRotate = false
           Player.Character.HumanoidRootPart.CFrame = Player.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(SpinStrength), 0)
        else
            Player.Character.Humanoid.AutoRotate = true
        end
    end)

    --Silent Aim | Source: not me but edited

    local function isVisible(position)
		return #workspace.CurrentCamera:GetPartsObscuringTarget({ position }, {}) == 0;
	end;

    local function getClosetsPlayer()
        local nearestmagnitude = math.huge
        local nearestenemy = nil
        for i,v in next, Players:GetChildren() do
            if v.Name ~= Player.Name then
                if v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild("HumanoidRootPart") and v.TeamColor ~= Player.TeamColor then
                    local vector, onScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Character["HumanoidRootPart"].Position)
                    if onScreen and not(getgenv()._visiblecheck and not isVisible(v.Character["HumanoidRootPart"].Position)) then
                        local magnitude = (Vector2.new(Player:GetMouse().X, Player:GetMouse().Y) - Vector2.new(vector.X, vector.Y)).Magnitude
                            if magnitude < nearestmagnitude and magnitude <= getgenv().fov then
                                nearestenemy = v
                                nearestmagnitude = magnitude
                            end
                        end
                    end
                end
            end
        return nearestenemy
    end

    task.spawn(function()
        local mt = getrawmetatable(game)
        setreadonly(mt, false)
        local namecall = mt.__namecall
        
        mt.__namecall = function(self,...)
            local args = {...}
            local method = getnamecallmethod()
            if tostring(self) == "Bullet" and tostring(method) == "FireServer" then
                if target and getgenv()._silentaim then
                    args[1] = target
                    return self.FireServer(self, unpack(args))
                end
            end
        return namecall(self,...)
        end
    end)

    RunService:BindToRenderStep("_silentaim",1,function()
        if game:GetService("UserInputService"):IsMouseButtonPressed(0) and Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("Humanoid") and Players.LocalPlayer.Character.Humanoid.Health > 0 then
            local enemy = getClosetsPlayer()
            if enemy and enemy.Character and enemy.Character:FindFirstChild("Humanoid") and enemy.Character.Humanoid.Health > 0 then
                local vector1, __onScreen__ = workspace.CurrentCamera:WorldToScreenPoint(enemy.Character["Head"].Position)
                local head = (Vector2.new(Player:GetMouse().X, Player:GetMouse().Y) - Vector2.new(vector1.X, vector1.Y)).Magnitude
                local vector2, __onScreen___ = workspace.CurrentCamera:WorldToScreenPoint(enemy.Character["HumanoidRootPart"].Position)
                local hitbox = (Vector2.new(Player:GetMouse().X, Player:GetMouse().Y) - Vector2.new(vector2.X, vector2.Y)).Magnitude
                if head <= hitbox then
                    magnitude = head
                else
                    magnitude = hitbox;
                end;
                if getfenv()._hitpart == "Head" then
                    target = workspace[enemy.Name]["Head"]
                else
                    if getfenv()._hitpart == "Random" then
                        if magnitude == hitbox then
                            target = workspace[enemy.Name]["HumanoidRootPart"];
                        else
                            target = workspace[enemy.Name]["Head"]
                        end;
                    else
                        target = workspace[enemy.Name]["HumanoidRootPart"];
                    end;
    
                end;
            else
                target = nil
            end
        end
    end)

    getgenv().game_client = game_client
end)
if not s and e then
    print("[mopsHub Error]: "..e)
end
