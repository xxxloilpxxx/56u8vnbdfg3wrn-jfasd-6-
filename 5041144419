local s,e = pcall(function()
    if not (game.PlaceId == 5041144419) then return end
    repeat
		task.wait()
	until game:IsLoaded()
    if getgenv().__mpho_1__loaded__ == true then return warn("[mopsHub Loader]: mopsHub is already loaded.") end
	getgenv().__mpho_1__loaded__ = true

    getgenv = getgenv

    --MODULES
	local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()
	local AkaliNotif = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/Dynissimo/main/Scripts/AkaliNotif.lua"))();
    local ESPFramework = loadstring(game:HttpGet("https://raw.githubusercontent.com/NougatBitz/Femware-Leak/main/ESP.lua", true))()
	local Notify = AkaliNotif.Notify;
	local writeclipboard,encodeb64,decodeb64,Request = ((syn and syn.write_clipboard) or setclipboard),((syn and syn.crypt.base64.encode) or (Krnl and Krnl.Base64.Encode)),((syn and syn.crypt.base64.decode) or (Krnl and Krnl.Base64.Decode)),(http_request or syn and syn.request or request or nil)
	local Player = game:GetService("Players").LocalPlayer
	local GunSettings = game:GetService("ReplicatedStorage"):WaitForChild("GunSettings",30)
	local GunSettingsBackup = {}
	local game_client = {}
	local settings = {
		autoLoadConfigs = nil,
	}
    local ESPSettings = {
        PlayerESP = {
            Enabled = getgenv()._esp,
            TracersOn = getgenv()._esptracers,
            BoxesOn = getgenv()._espboxes,
            NamesOn = getgenv()._espnames,
            DistanceOn = getgenv()._espdistance,
            AttachShift = getgenv()._esptracerattachshift,
            HealthOn = false,
            ToolOn = false,
            TeamMates = getgenv()._espteamcheck,
            FaceCamOn = false,
            Distance = 2000,
        },
        ScrapESP = {
            Enabled = false,
            Distance = 2000,
            LegendaryOnly = true,
            RareOnly = true,
            GoodOnly = true,
            BadOnly = true
        },
        SafeESP = {
            Enabled = false,
            Distance = 2000,
            BigOnly = true,
            SmallOnly = true
        },
        RegisterESP = {
            Enabled = false,
            Distance = 2000
        },
        ESPColor = Color3.fromRGB(255, 255, 255),
        ToolColor = Color3.fromRGB(255, 255, 255)
    }

	local Positions = {
		["Security Department"] = CFrame.new(-587,40,-59),
		["Intelligece Agency"] = CFrame.new(-636,41,191),
		["Shooting Range"] = CFrame.new(-394,44,5),
		["05 Spawn"] = CFrame.new(-458,46,200),
		["CDC Viewing Area"] = CFrame.new(65,65,461),
		["Class-D Cells"] = CFrame.new(129,40,562),
		["Control Room"] = CFrame.new(100,34,198),
		["Sector 3"] = CFrame.new(604,40,161),
		["Sector 2"] = CFrame.new(-106,46,-116),
		["Sector 1"] = CFrame.new(-363,41,79),
		["Medical Sector"] = CFrame.new(112,48,-166),
		["Transformer Room"] = CFrame.new(-34,32,-190),

	}
	local TeleportDropdownOptions = {}

    local Players = game:GetService("Players")
    local Mouse = Player:GetMouse()
    local RunService = game:GetService("RunService")

    --STUFF THAT NEEDS TO RUN AT EXECUTE
	if isfile("/mopsHub/settings_scproleplay.mhs") then
		local s,e = pcall(function()
			local file_settings = readfile("/mopsHub/settings_scproleplay.mhs")
			local parsedSettings = {}
			local s,e = pcall(function()
				parsedSettings = game:GetService("HttpService"):JSONDecode(file_settings)
			end)
			if s then
				for _,v in pairs(parsedSettings) do
					settings[_] = v
				end
			else
				warn("[mopsHub Error]: Unable to parse local saved settings json.\nError:\n\n> ".. e)
			end
		end)
		if not s and e then
			print(e)
		end
	else
		autoLoadConfigs = true
		writefile("/mopsHub/settings_scproleplay.mhs", tostring(game:GetService("HttpService"):JSONEncode(settings)))
		print("[mopsHub Debug]: Created local config file.")
	end

	for name,pos in pairs(Positions) do
		table.insert(TeleportDropdownOptions, name)
	end

	--ENV
	getgenv().ESPFramework = ESPFramework
    getgenv()._esptracerattachshift = 1
    getgenv()._WINDOW = {
		Tabs = {},
	}

	--WINDOW CONFIG
	local _TABS = {
		"Weapon",
		"Visual",
		"Character",
		"Teleport",
		"Credits"
	}

    local _FUNCTIONS = {
		["Weapon"] = {
			{
                Function = "CreateSection",
                Args = "━ Gun Mods ━",
            },
			{
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Infinite Ammo",
					Flag = "_infammo",
					Callback = function(Value)
						getgenv()._infammo = Value
                        if Value == true then
							game_client:removeWeaponIdentifiers()
							for _,v in pairs(GunSettings:GetChildren()) do
								if v:IsA("ModuleScript") then
									local module = v
									if require(module).Clip and require(module).Ammo then
										game_client:editGunSetting(module, "Ammo", 9999)
										game_client:editGunSetting(module, "Clip", 9999)
									end
								end
							end
						else
							game_client:removeWeaponIdentifiers()
							for _,v in pairs(GunSettings:GetChildren()) do
								if v:IsA("ModuleScript") then
									local module = v
									if require(module).Clip and require(module).Ammo then
										game_client:editGunSetting(module, "Ammo", GunSettingsBackup[v.Name].Ammo)
										game_client:editGunSetting(module, "Clip", GunSettingsBackup[v.Name].Clip)
									end
								end
							end
                        end
					end,
				}
			},
			{
				Function = "CreateParagraph",
				_envState = false,
				Args = {Title = "Notes:",Content = "You might have to reload your weapon once to apply!\nYou can't turn it off because its bugged right now."}
			},
			{
				Function = "CreateInput",
				Args = {
					Name = "Aim FOV",
                    PlaceholderText = "Aim FOV",
					Flag = "_aimfov",
                    RemoveTextAfterFocusLost = false,
					Callback = function(Value)
                        game_client:removeWeaponIdentifiers()
						for _,v in pairs(GunSettings:GetChildren()) do
							if v:IsA("ModuleScript") then
								local module = v
								if require(module).AimFOV then
									game_client:editGunSetting(module, "AimFOV", tonumber(Value))
									--game_client:editGunSetting(module, "ReloadAnimTime", 0)
								end
							end
						end
					end,
				}
			},
			--[[{
				Function = "CreateInput",
				Args = {
					Name = "Test",
                    PlaceholderText = "Test",
					Flag = "_aimfov",
                    RemoveTextAfterFocusLost = false,
					Callback = function(Value)
                        game_client:removeWeaponIdentifiers()
						for _,v in pairs(GunSettings:GetChildren()) do
							if v:IsA("ModuleScript") then
								local module = v
								if require(module).Damage then
									game_client:editGunSetting(module, "Weight", Value)
								end
							end
						end
					end,
				}
			},]]
		},
		["Visual"] = {
            {
				Function = "CreateSection",
				Args = "━ ESP ━",
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "ESP",
					Flag = "_esp",
					Callback = function(Value)
						getgenv()._esp = Value
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Boxes",
					Flag = "_espboxes",
					Callback = function(Value)
						getgenv()._espboxes = Value
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Tracers",
					Flag = "_esptracers",
					Callback = function(Value)
						getgenv()._esptracers = Value
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateDropdown",
				_envState = "Bottom",
				Args = {
					Name = "Tracers Orientation",
					Flag = "_tracersorientation",
					Options = {"Bottom","Middle","Top"},
					CurrentOption = "Bottom",
					Callback = function(Value)
                        local v = 0

                        if Value == "Bottom" then
                            v = 1
                        elseif Value == "Middle" then
                            v = 2
                        elseif Value == "Top" then
                            v = 1000
                        end
						getgenv()._esptracerattachshift = v or 0
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Names",
					Flag = "_espnames",
					Callback = function(Value)
						getgenv()._espnames = Value
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Tools",
					Flag = "_esptool",
					Callback = function(Value)
						getgenv()._esptool = Value
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Health",
					Flag = "_esphealth",
					Callback = function(Value)
						getgenv()._esphealth = Value
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Distance",
					Flag = "_espdistance",
					Callback = function(Value)
						getgenv()._espdistance = Value
                        getgenv().updateespvalues()
					end,
				}
			},
            {
				Function = "CreateToggle",
				_envState = true,
				Args = {
					Name = "Team Check",
					Flag = "_espteamcheck",
					Callback = function(Value)
						getgenv()._espteamcheck = not Value
                        getgenv().updateespvalues()
					end,
				}
			},
        },
		["Character"] = {
			{
				Function = "CreateSection",
				Args = "━ Humanoid Modifications ━",
			},
            {
                Function = "CreateSlider",
                _envState = 16,
                Args = {
                    Name = "Walkspeed",
                    Flag = "_walkspeed",
                    CurrentValue = 16,
                    Range = {0, 200},
					Increment = 1,
					Suffix = "",
                    Callback = function(Value)
                        getgenv()._walkspeed = Value
                    end
                }
            },
            --[[{
                Function = "CreateSlider",
                _envState = 50,
                Args = {
                    Name = "JumpPower",
                    Flag = "_jumppower",
                    CurrentValue = 50,
                    Range = {0, 200},
					Increment = 1,
					Suffix = "",
                    Callback = function(Value)
                        getgenv()._jumppower = Value
                    end
                }
            },]]
			{
				Function = "CreateSection",
				Args = "━ Infinite Jump ━"
			},
            {
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Infinite Jump",
					Flag = "_infjump",
					Callback = function(Value)
						getgenv()._infjump = Value
					end,
				}
			},
            {
                Function = "CreateSlider",
                Args = {
                    Name = "Infinite Jump Height",
                    Flag = "_infjumpheight",
                    CurrentValue = 30,
                    Range = {0, 60},
					Increment = 1,
					Suffix = "",
                    Callback = function(Value)
                        getgenv()._infjumpheight = Value
                    end
                }
            },
			{
				Function = "CreateSection",
				Args = "━ Other ━"
			},
			{
				Function = "CreateToggle",
				_envState =  false,
				Args = {
					Name = "Disable Jump Cooldown",
					Flag = "_nojumpcd",
					Callback = function(Value)
						getgenv()._nojumpcd = Value
					end,
				}
			},
		},
		["Teleport"] = {
			{
				Function = "CreateSection",
				Args = "━ Teleports ━"
			},
			{
				Function = "CreateDropdown",
				Args = {
					Name = "Teleport to",
					Options = TeleportDropdownOptions,
					CurrentOption = "select",
					Callback = function(Value)
						if Positions[Value] then
							game_client:teleportPlayer(Positions[Value])
						else
							warn("[mopsHub Error]: Unable to find position for ".. Value)
						end
					end,
				}
			},
		}
    }

    local _CREDITS = {
		["Developers"] = {
			{"ShyFlooo","Programmer"},
		},
	}

    --Functions | Source: some self made

    --CREATE WINDOW
	local Window = Rayfield:CreateWindow({
		Name = "mopsHub - SCP: Roleplay",
		LoadingTitle = "mopsHub - SCP: Roleplay",
		LoadingSubtitle = "by ShyFlooo",
		ConfigurationSaving = {
			Enabled = true,
			FolderName = "/mopsHub/.config", -- Create a custom folder for your hub/game
			FileName = "mopshub_scproleplay"
		}, 
		KeySystem = true, -- Set this to true to use our key system
		KeySettings = {
			Title = "mopsHub - SCP: Roleplay",
			Subtitle = "Key System",
			Note = "Key here (copied): discord.gg/g4EGAwjUAK",
			FileName = "MOPSHUBKEY",
			SaveKey = true,
			GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
			Key = "8ETVb2UtkTaiwfymcLyxPzRfRoxDfyadJ"
		}
	})

	--SETUP WINDOW
	for index, name in pairs(_TABS) do
		local w = Window:CreateTab(name)
		getgenv()._WINDOW.Tabs[name] = w
	end
    getgenv()._WINDOW.Tabs["Credits"]:CreateSection("━ Credits ━")
	for index, value in pairs(_CREDITS) do
		local content = ""
		for i,data in pairs(value) do
			if #data[2] > 0 then
				content = content.."\n"..data[1].." - ".. data[2]
			else
				content = content.."\n"..data[1]
			end
		end
		getgenv()._WINDOW.Tabs["Credits"]:CreateParagraph({Title = index, Content = content})
	end

	for index, funcs in pairs(_FUNCTIONS) do
		print("Loaded "..#funcs.." function(s) for ".. index)
		for i, func in pairs(funcs) do
			if func.Function and func.Args then
				local Tab = getgenv()._WINDOW.Tabs[index]
				if Tab then
					local s,e = pcall(function()
						local f,l = func.Function, true
						if f == "CreateSection" then
							Tab:CreateSection(func.Args)
						elseif f == "CreateButton" then
							Tab:CreateButton(func.Args)
						elseif f == "CreateToggle" then
							Tab:CreateToggle(func.Args)
						elseif f == "CreateDropdown" then
							Tab:CreateDropdown(func.Args)
						elseif f == "CreateInput" then
							Tab:CreateInput(func.Args)
						elseif f == "CreateSlider" then
							Tab:CreateSlider(func.Args)
						elseif f == "CreateParagraph" then
							Tab:CreateParagraph(func.Args)
						elseif f == "CreateLabel" then
							Tab:CreateLabel(func.Args)
						elseif f == "CreateKeybind" then
							Tab:CreateKeybind(func.Args)
						else
							l = false
						end; if l == true then
							--print("Created function "..tostring(func.Args.Flag or func.Args or "unknown").. " for ".. index.. " ["..string.gsub(func.Function, "Create", "").. "]")
						else
							print("Unable to create "..tostring(func.Function).. " function for ".. index .. " ["..i.."]")
						end
		
						if func.Args.Flag then
							--print("Creating env ".. tostring(func.Args.Flag) .. " with the value ".. tostring(func._envState))
							getgenv()[func.Args.Flag] = func._envState
						end
					end)
					if not s and e then
						print("[mopsHub UI Loader Error]: > "..e)
					end
				end
			end
		end
	end

	--> FUNCTIONS
	function game_client:teleportPlayer(cframe)
        if not Player.Character and not Player.Character.HumanoidRootPart and not typeof(cframe) == "CFrame" then return end
        local h = Player.Character.HumanoidRootPart
        game:GetService("TweenService"):Create(h, TweenInfo.new(1), {CFrame = cframe}):Play()
    end; function game_client:removeWeaponIdentifiers()
		Player.Character.Humanoid:UnequipTools()
		task.wait(0.1)
		for _,v in pairs(Player.Backpack:GetChildren()) do
			if v:IsA("Tool") and v:FindFirstChild("identifier")then
				v:FindFirstChild("identifier"):Destroy()
			end
		end
	end; function game_client:editGunSetting(module, index, value)
		module = require(module)
		if module then
			if module[index] and typeof(module[index]) == typeof(value) then
				module[index] = value
			end
		end
		print(module[index])
	end;

	getgenv().updateespvalues = function()
        ESPFramework.Color = ESPSettings.ESPColor
        ESPFramework.ToolColor = ESPSettings.ToolColor
        ESPFramework.Tracers = getgenv()._esptracers
        ESPFramework.Names = getgenv()._espnames
        ESPFramework.Health = getgenv()._esphealth
        ESPFramework.Distance = getgenv()._espdistance
        ESPFramework.Tool = getgenv()._esptool
        ESPFramework.Boxes = getgenv()._espboxes
        ESPFramework.FaceCamera = ESPSettings.PlayerESP.FaceCamOn
        ESPFramework.TeamMates = getgenv()._espteamcheck
        ESPFramework.AttachShift = getgenv()._esptracerattachshift
        ESPFramework:Toggle(getgenv()._esp)
    end; getgenv().updateespvalues()

	--> MAIN

	--Save Standard Gun Settings

	for _,v in pairs(GunSettings:GetChildren()) do
		if v:IsA("ModuleScript") then
			local m = require(v)
			table.insert(GunSettingsBackup, v.Name)
			GunSettingsBackup[v.Name] = m
		end
	end

	--Infinite Jump | Source: idk

	local function Action(Object, Function) if Object ~= nil then Function(Object); end end

	game:GetService('UserInputService').InputBegan:Connect(function(UserInput)
		if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
			if not getgenv()._infjump then return end
			Action(game:GetService('Players').LocalPlayer.Character.Humanoid, function(self)
				if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
					Action(self.Parent.HumanoidRootPart, function(self)
						self.Velocity = Vector3.new(0, getgenv()._infjumpheight or 50, 0);
					end)
				end
			end)
		end
	end)

	--Walkspeed Hook to bypass the poop detection | Source: self made, well its just a simple hook

	task.spawn(function()
		local gmt = getrawmetatable(game)
		setreadonly(gmt, false)
		local oldindex = gmt.__index
		gmt.__index = newcclosure(function(self,b)
			if b == "WalkSpeed" then
				return 16
			end
			return oldindex(self,b)
		end)
	end)

	--JumpPower Hook to bypass the poop detection | Source: self made, well its just a simple hook

	task.spawn(function()
		local gmt = getrawmetatable(game)
		setreadonly(gmt, false)
		local oldindex = gmt.__index
		gmt.__index = newcclosure(function(self,b)
			if b == "JumpPower" then
				return 50
			end
			return oldindex(self,b)
		end)
	end)

	--> No Jump Cooldown

	task.spawn(function()
		while task.wait() do
			pcall(function()
				if getgenv()._nojumpcd then
					Player.Character.Humanoid.JumpPower = 50
				end
			end)
		end
	end)

	--> WalkSpeed & JumpPower Changer

	task.spawn(function()
		while task.wait() do
			pcall(function()
				if not game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftShift) then
					Player.Character.Humanoid.WalkSpeed = getgenv()._walkspeed
				else
					Player.Character.Humanoid.WalkSpeed = getgenv()._walkspeed + 10
				end
			end)
		end
	end)

	task.spawn(function()
		local mt = getrawmetatable(game)
		setreadonly(mt,false)
		local oldindex = mt.__index

		mt.__index = function (a,b)
			if tostring(a) == "CurrentAmmo" or tostring(a) == "Ammo" then
				if tostring(b) == "Value" and getgenv()._infammo then
					return 5000
				end
			end
			return oldindex(a,b)
		end
	end)
end)
if not s and e then
    print("[mopsHub Error]: "..e)
end
